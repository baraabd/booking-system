{"ast":null,"code":"var _jsxFileName = \"/Users/baraabdullatif/booking-system/src/components/TimeSlots.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TimePicker from 'react-time-picker';\nimport ReactSlider from 'react-slider';\nimport '../styles.css'; // Import the global styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MINUTES_IN_A_DAY = 780;\nfunction TimeSlots({\n  onTimeSelect\n}) {\n  _s();\n  const [timeRange, setTimeRange] = useState([, 1020]); // Default 8:00 AM to 5:00 PM\n  const [isTimeSelected, setIsTimeSelected] = useState(false); // Track if the user has confirmed the time\n\n  // Handles time range change when slider is being adjusted\n  const handleTimeRangeChange = value => {\n    setTimeRange(value); // Update the time range in the component's state\n    setIsTimeSelected(false); // Reset the confirmation state if the user adjusts the time\n  };\n\n  // Handles the final time selection when the user clicks the \"Confirm Time\" button\n  const handleConfirmTime = () => {\n    const [from, to] = timeRange;\n    const fromTime = convertMinutesToTime(from);\n    const toTime = convertMinutesToTime(to);\n    setIsTimeSelected(true); // Mark that the user has confirmed the time\n    onTimeSelect(fromTime, toTime); // Pass the selected times to the parent component\n  };\n\n  // Helper function to convert minutes into time format (HH:MM AM/PM)\n  const convertMinutesToTime = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    const formattedHours = hours % 24 === 0 ? '00' : hours.toString().padStart(2, '0');\n    const formattedMinutes = mins.toString().padStart(2, '0');\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const hour12 = hours % 12 === 0 ? 12 : hours % 12;\n    return `${hour12}:${formattedMinutes} ${period}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-slots-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select Time Slot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-range-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"From: \", convertMinutesToTime(timeRange[0])]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"To: \", convertMinutesToTime(timeRange[1])]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactSlider, {\n      className: \"time-slider\",\n      thumbClassName: \"time-slider-thumb\",\n      trackClassName: \"time-slider-track\",\n      min: 0,\n      max: MINUTES_IN_A_DAY,\n      step: 30 // Step in 30-minute intervals\n      ,\n      value: timeRange,\n      onChange: handleTimeRangeChange // Update time range while slider is being moved\n      ,\n      minDistance: 60 // Ensure at least 1 hour between start and end times\n      ,\n      pearling: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"confirm-time-button\",\n      onClick: handleConfirmTime,\n      children: \"Confirm Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), isTimeSelected && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Time Confirmed! Proceed to enter your details.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(TimeSlots, \"xZNvr8N5cVBqKrpNjQM06y6NBSw=\");\n_c = TimeSlots;\nexport default TimeSlots;\nvar _c;\n$RefreshReg$(_c, \"TimeSlots\");","map":{"version":3,"names":["React","useState","TimePicker","ReactSlider","jsxDEV","_jsxDEV","MINUTES_IN_A_DAY","TimeSlots","onTimeSelect","_s","timeRange","setTimeRange","isTimeSelected","setIsTimeSelected","handleTimeRangeChange","value","handleConfirmTime","from","to","fromTime","convertMinutesToTime","toTime","minutes","hours","Math","floor","mins","formattedHours","toString","padStart","formattedMinutes","period","hour12","className","children","fileName","_jsxFileName","lineNumber","columnNumber","thumbClassName","trackClassName","min","max","step","onChange","minDistance","pearling","onClick","_c","$RefreshReg$"],"sources":["/Users/baraabdullatif/booking-system/src/components/TimeSlots.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport TimePicker from 'react-time-picker';\nimport ReactSlider from 'react-slider';\n\nimport '../styles.css';  // Import the global styles\n\nconst MINUTES_IN_A_DAY = 780;\n\nfunction TimeSlots({ onTimeSelect }) {\n  const [timeRange, setTimeRange] = useState([, 1020]); // Default 8:00 AM to 5:00 PM\n  const [isTimeSelected, setIsTimeSelected] = useState(false); // Track if the user has confirmed the time\n\n  // Handles time range change when slider is being adjusted\n  const handleTimeRangeChange = (value) => {\n    setTimeRange(value); // Update the time range in the component's state\n    setIsTimeSelected(false); // Reset the confirmation state if the user adjusts the time\n  };\n\n  // Handles the final time selection when the user clicks the \"Confirm Time\" button\n  const handleConfirmTime = () => {\n    const [from, to] = timeRange;\n    const fromTime = convertMinutesToTime(from);\n    const toTime = convertMinutesToTime(to);\n    setIsTimeSelected(true); // Mark that the user has confirmed the time\n    onTimeSelect(fromTime, toTime); // Pass the selected times to the parent component\n  };\n\n  // Helper function to convert minutes into time format (HH:MM AM/PM)\n  const convertMinutesToTime = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    const formattedHours = hours % 24 === 0 ? '00' : hours.toString().padStart(2, '0');\n    const formattedMinutes = mins.toString().padStart(2, '0');\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const hour12 = hours % 12 === 0 ? 12 : hours % 12;\n    return `${hour12}:${formattedMinutes} ${period}`;\n  };\n\n  return (\n    <div className=\"time-slots-container\">\n      <h2>Select Time Slot</h2>\n      <div className=\"time-range-display\">\n        <span>From: {convertMinutesToTime(timeRange[0])}</span>\n        <span>To: {convertMinutesToTime(timeRange[1])}</span>\n      </div>\n\n      <ReactSlider\n        className=\"time-slider\"\n        thumbClassName=\"time-slider-thumb\"\n        trackClassName=\"time-slider-track\"\n        min={0}\n        max={MINUTES_IN_A_DAY}\n        step={30} // Step in 30-minute intervals\n        value={timeRange}\n        onChange={handleTimeRangeChange} // Update time range while slider is being moved\n        minDistance={60} // Ensure at least 1 hour between start and end times\n        pearling\n      />\n\n      <button className=\"confirm-time-button\" onClick={handleConfirmTime}>\n        Confirm Time\n      </button>\n\n      {isTimeSelected && (\n        <div className=\"confirmation-message\">\n          <p>Time Confirmed! Proceed to enter your details.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default TimeSlots;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}