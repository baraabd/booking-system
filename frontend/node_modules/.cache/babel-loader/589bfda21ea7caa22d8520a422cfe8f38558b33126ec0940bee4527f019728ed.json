{"ast":null,"code":"var _jsxFileName = \"/Users/baraabdullatif/booking-system/src/components/TimeSlots.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TimePicker from 'react-time-picker';\nimport ReactSlider from 'react-slider';\nimport '../styles.css'; // Import the global styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MINUTES_IN_A_DAY = 1440;\nfunction TimeSlots({\n  onTimeSelect\n}) {\n  _s();\n  const [timeRange, setTimeRange] = useState([480, 1020]); // Default 8:00 AM to 5:00 PM\n\n  // Handles time range change when slider is being adjusted (but does not trigger stage change)\n  const handleTimeRangeChange = value => {\n    setTimeRange(value); // Update the time range in the component's state\n  };\n\n  // Handles the event when the user stops moving the slider (finalizes selection)\n  const handleTimeRangeFinal = value => {\n    const [from, to] = value;\n    const fromTime = convertMinutesToTime(from);\n    const toTime = convertMinutesToTime(to);\n    onTimeSelect(fromTime, toTime); // Trigger the stage change only after slider interaction is complete\n  };\n\n  // Helper function to convert minutes into time format (HH:MM AM/PM)\n  const convertMinutesToTime = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    const formattedHours = hours % 24 === 0 ? '00' : hours.toString().padStart(2, '0');\n    const formattedMinutes = mins.toString().padStart(2, '0');\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const hour12 = hours % 12 === 0 ? 12 : hours % 12;\n    return `${hour12}:${formattedMinutes} ${period}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"time-slots-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select Time Slot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-range-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"From: \", convertMinutesToTime(timeRange[0])]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"To: \", convertMinutesToTime(timeRange[1])]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactSlider, {\n      className: \"time-slider\",\n      thumbClassName: \"time-slider-thumb\",\n      trackClassName: \"time-slider-track\",\n      min: 0,\n      max: MINUTES_IN_A_DAY,\n      step: 30 // Step in 30-minute intervals\n      ,\n      value: timeRange,\n      onChange: handleTimeRangeChange // Update time range while slider is being moved\n      ,\n      onAfterChange: handleTimeRangeFinal // Only call onTimeSelect after the user stops interacting with the slider\n      ,\n      minDistance: 60 // Ensure at least 1 hour between start and end times\n      ,\n      pearling: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(TimeSlots, \"KR39vEUs/9QXnXgxA++5MNZcsco=\");\n_c = TimeSlots;\nexport default TimeSlots;\nvar _c;\n$RefreshReg$(_c, \"TimeSlots\");","map":{"version":3,"names":["React","useState","TimePicker","ReactSlider","jsxDEV","_jsxDEV","MINUTES_IN_A_DAY","TimeSlots","onTimeSelect","_s","timeRange","setTimeRange","handleTimeRangeChange","value","handleTimeRangeFinal","from","to","fromTime","convertMinutesToTime","toTime","minutes","hours","Math","floor","mins","formattedHours","toString","padStart","formattedMinutes","period","hour12","className","children","fileName","_jsxFileName","lineNumber","columnNumber","thumbClassName","trackClassName","min","max","step","onChange","onAfterChange","minDistance","pearling","_c","$RefreshReg$"],"sources":["/Users/baraabdullatif/booking-system/src/components/TimeSlots.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport TimePicker from 'react-time-picker';\nimport ReactSlider from 'react-slider';\n\nimport '../styles.css';  // Import the global styles\n\nconst MINUTES_IN_A_DAY = 1440;\n\nfunction TimeSlots({ onTimeSelect }) {\n  const [timeRange, setTimeRange] = useState([480, 1020]); // Default 8:00 AM to 5:00 PM\n\n  // Handles time range change when slider is being adjusted (but does not trigger stage change)\n  const handleTimeRangeChange = (value) => {\n    setTimeRange(value);  // Update the time range in the component's state\n  };\n\n  // Handles the event when the user stops moving the slider (finalizes selection)\n  const handleTimeRangeFinal = (value) => {\n    const [from, to] = value;\n    const fromTime = convertMinutesToTime(from);\n    const toTime = convertMinutesToTime(to);\n    onTimeSelect(fromTime, toTime);  // Trigger the stage change only after slider interaction is complete\n  };\n\n  // Helper function to convert minutes into time format (HH:MM AM/PM)\n  const convertMinutesToTime = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    const formattedHours = hours % 24 === 0 ? '00' : hours.toString().padStart(2, '0');\n    const formattedMinutes = mins.toString().padStart(2, '0');\n    const period = hours >= 12 ? 'PM' : 'AM';\n    const hour12 = hours % 12 === 0 ? 12 : hours % 12;\n    return `${hour12}:${formattedMinutes} ${period}`;\n  };\n\n  return (\n    <div className=\"time-slots-container\">\n      <h2>Select Time Slot</h2>\n      <div className=\"time-range-display\">\n        <span>From: {convertMinutesToTime(timeRange[0])}</span>\n        <span>To: {convertMinutesToTime(timeRange[1])}</span>\n      </div>\n      <ReactSlider\n        className=\"time-slider\"\n        thumbClassName=\"time-slider-thumb\"\n        trackClassName=\"time-slider-track\"\n        min={0}\n        max={MINUTES_IN_A_DAY}\n        step={30}  // Step in 30-minute intervals\n        value={timeRange}\n        onChange={handleTimeRangeChange}  // Update time range while slider is being moved\n        onAfterChange={handleTimeRangeFinal}  // Only call onTimeSelect after the user stops interacting with the slider\n        minDistance={60}  // Ensure at least 1 hour between start and end times\n        pearling\n      />\n    </div>\n  );\n}\n\nexport default TimeSlots;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}