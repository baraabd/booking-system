{"ast":null,"code":"var _jsxFileName = \"/Users/baraabdullatif/booking-system/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CalendarComponent from './components/Calendar';\nimport TimeSlots from './components/TimeSlots';\nimport BookingForm from './components/BookingForm';\nimport ServiceDetails from './components/ServiceDetails';\nimport BookingConfirmed from './components/Confirmation';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedTimeFrom, setSelectedTimeFrom] = useState('');\n  const [selectedTimeTo, setSelectedTimeTo] = useState('');\n  const [userDetails, setUserDetails] = useState(null);\n  const [serviceDetails, setServiceDetails] = useState(null);\n  const [stage, setStage] = useState(1);\n  const [discountMessage, setDiscountMessage] = useState('');\n\n  // Calendar date selection handler\n  const handleDateSelect = date => {\n    setSelectedDate(date);\n    setStage(2); // Move to TimeSlots after selecting date\n  };\n\n  // Time slot selection handler\n  const handleTimeSelect = (from, to) => {\n    setSelectedTimeFrom(from);\n    setSelectedTimeTo(to);\n    setStage(3); // Move to BookingForm after selecting time slot\n  };\n\n  // Function to check if the user exists in the system\n\n  const checkUserExists = async email => {\n    const query = `\n      query {\n        checkUserExists(email: \"${email}\")\n      }\n    `;\n    try {\n      const response = await fetch('http://localhost:4000/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n      const result = await response.json();\n      console.log('GraphQL Response:', result); // Log the full response from the server\n      console.log(result.data);\n      // Check if the response contains the 'data' and 'checkUserExists' fields\n      if (result.data && result.data.checkUserExists !== undefined) {\n        return result.data.checkUserExists;\n      } else {\n        throw new Error('Unexpected response structure');\n      }\n    } catch (error) {\n      console.error('Error checking user:', error);\n      return false; // Return false if any error occurs\n    }\n  };\n\n  // User details form submission handler\n  const handleProceedToService = async details => {\n    const userExists = await checkUserExists(details.email);\n    if (userExists) {\n      console.log(\"Discount 10%\");\n      setDiscountMessage('You are already in our system and get 10% discount!');\n    }\n    console.log(details);\n    setUserDetails(details);\n    setStage(4); // Move to ServiceDetails after form submission\n  };\n\n  // Function to send the booking information to the backend\n  const saveBookingToBackend = async bookingDetails => {\n    const query = `\n      mutation {\n        addBooking(\n          name: \"${bookingDetails.name}\",\n          email: \"${bookingDetails.email}\",\n          phone: \"${bookingDetails.phone}\",\n          address: \"${bookingDetails.address}\",\n          postalCode: \"${bookingDetails.postalCode}\",\n          bookingDate: \"${bookingDetails.bookingDate}\",\n          bookingStart: \"${bookingDetails.timeFrom}\",\n          bookingEnd: \"${bookingDetails.timeTo}\",\n          serviceName: \"${bookingDetails.serviceName}\",\n          servicePrice: ${bookingDetails.servicePrice},\n          totalArea: ${bookingDetails.totalArea},\n          discount: ${bookingDetails.discount},\n          amount: ${bookingDetails.amount}\n        ) {\n          id\n          name\n        }\n      }\n    `;\n    try {\n      const response = await fetch('http://localhost:4000/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to save booking');\n      }\n      const result = await response.json();\n      console.log(result); // Handle success here\n    } catch (error) {\n      console.error('Error:', error);\n      alert('There was an issue saving your booking. Please try again.');\n    }\n  };\n\n  // Service details form submission handler\n  const handleConfirmBooking = async serviceDetails => {\n    let discount = 0;\n    if (discountMessage) {\n      discount = 10; // Apply 10% discount if the user exists\n    }\n    const bookingDetails = {\n      ...userDetails,\n      // Combine user details\n      ...serviceDetails,\n      // Combine service details\n      bookingDate: selectedDate.toISOString(),\n      // Format selected date to ISO string\n      timeFrom: selectedTimeFrom,\n      // Include selected time from\n      timeTo: selectedTimeTo,\n      // Include selected time to\n      discount: discount // Apply discount if applicable\n    };\n    setServiceDetails(bookingDetails);\n\n    // Save booking to backend\n    await saveBookingToBackend(bookingDetails);\n    setStage(5); // Move to BookingConfirmed (confirmation) stage\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [stage === 1 && /*#__PURE__*/_jsxDEV(CalendarComponent, {\n      onDateSelect: handleDateSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 23\n    }, this), stage === 2 && /*#__PURE__*/_jsxDEV(TimeSlots, {\n      onTimeSelect: handleTimeSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 23\n    }, this), stage === 3 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [discountMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: discountMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 31\n      }, this), /*#__PURE__*/_jsxDEV(BookingForm, {\n        onProceedToService: handleProceedToService\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), stage === 4 && /*#__PURE__*/_jsxDEV(ServiceDetails, {\n      onConfirmBooking: handleConfirmBooking\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 23\n    }, this), stage === 5 && /*#__PURE__*/_jsxDEV(BookingConfirmed, {\n      bookingDetails: serviceDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NiIhxNoY8pOMWQEbovIWghlWwnk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CalendarComponent","TimeSlots","BookingForm","ServiceDetails","BookingConfirmed","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","selectedDate","setSelectedDate","selectedTimeFrom","setSelectedTimeFrom","selectedTimeTo","setSelectedTimeTo","userDetails","setUserDetails","serviceDetails","setServiceDetails","stage","setStage","discountMessage","setDiscountMessage","handleDateSelect","date","handleTimeSelect","from","to","checkUserExists","email","query","response","fetch","method","headers","body","JSON","stringify","result","json","console","log","data","undefined","Error","error","handleProceedToService","details","userExists","saveBookingToBackend","bookingDetails","name","phone","address","postalCode","bookingDate","timeFrom","timeTo","serviceName","servicePrice","totalArea","discount","amount","ok","alert","handleConfirmBooking","toISOString","children","onDateSelect","fileName","_jsxFileName","lineNumber","columnNumber","onTimeSelect","onProceedToService","onConfirmBooking","_c","$RefreshReg$"],"sources":["/Users/baraabdullatif/booking-system/frontend/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport CalendarComponent from './components/Calendar';\nimport TimeSlots from './components/TimeSlots';\nimport BookingForm from './components/BookingForm';\nimport ServiceDetails from './components/ServiceDetails';\nimport BookingConfirmed from './components/Confirmation';\nimport './styles.css';\n\nfunction App() {\n  const [selectedDate, setSelectedDate] = useState(null);\n  const [selectedTimeFrom, setSelectedTimeFrom] = useState('');\n  const [selectedTimeTo, setSelectedTimeTo] = useState('');\n  const [userDetails, setUserDetails] = useState(null);\n  const [serviceDetails, setServiceDetails] = useState(null);\n  const [stage, setStage] = useState(1);\n  const [discountMessage, setDiscountMessage] = useState('');\n\n  // Calendar date selection handler\n  const handleDateSelect = (date) => {\n    setSelectedDate(date);\n    setStage(2); // Move to TimeSlots after selecting date\n  };\n\n  // Time slot selection handler\n  const handleTimeSelect = (from, to) => {\n    setSelectedTimeFrom(from);\n    setSelectedTimeTo(to);\n    setStage(3); // Move to BookingForm after selecting time slot\n  };\n\n  // Function to check if the user exists in the system\n  \n  const checkUserExists = async (email) => {\n    const query = `\n      query {\n        checkUserExists(email: \"${email}\")\n      }\n    `;\n  \n    try {\n      const response = await fetch('http://localhost:4000/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n      });\n  \n      const result = await response.json();\n      console.log('GraphQL Response:', result);  // Log the full response from the server\n      console.log(result.data);\n      // Check if the response contains the 'data' and 'checkUserExists' fields\n      if (result.data && result.data.checkUserExists !== undefined) {\n        return result.data.checkUserExists;\n      } else {\n        throw new Error('Unexpected response structure');\n      }\n    } catch (error) {\n      console.error('Error checking user:', error);\n      return false; // Return false if any error occurs\n    }\n  };\n  \n\n  // User details form submission handler\n  const handleProceedToService = async (details) => {\n    const userExists = await checkUserExists(details.email);\n    if (userExists) {\n      console.log(\"Discount 10%\");\n      setDiscountMessage('You are already in our system and get 10% discount!');\n    }\n    console.log(details);\n    setUserDetails(details);\n    setStage(4); // Move to ServiceDetails after form submission\n  };\n\n  // Function to send the booking information to the backend\n  const saveBookingToBackend = async (bookingDetails) => {\n    const query = `\n      mutation {\n        addBooking(\n          name: \"${bookingDetails.name}\",\n          email: \"${bookingDetails.email}\",\n          phone: \"${bookingDetails.phone}\",\n          address: \"${bookingDetails.address}\",\n          postalCode: \"${bookingDetails.postalCode}\",\n          bookingDate: \"${bookingDetails.bookingDate}\",\n          bookingStart: \"${bookingDetails.timeFrom}\",\n          bookingEnd: \"${bookingDetails.timeTo}\",\n          serviceName: \"${bookingDetails.serviceName}\",\n          servicePrice: ${bookingDetails.servicePrice},\n          totalArea: ${bookingDetails.totalArea},\n          discount: ${bookingDetails.discount},\n          amount: ${bookingDetails.amount}\n        ) {\n          id\n          name\n        }\n      }\n    `;\n\n    try {\n      const response = await fetch('http://localhost:4000/graphql', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to save booking');\n      }\n\n      const result = await response.json();\n      console.log(result); // Handle success here\n    } catch (error) {\n      console.error('Error:', error);\n      alert('There was an issue saving your booking. Please try again.');\n    }\n  };\n\n  // Service details form submission handler\n  const handleConfirmBooking = async (serviceDetails) => {\n    let discount = 0;\n    if (discountMessage) {\n      discount = 10; // Apply 10% discount if the user exists\n    }\n\n    const bookingDetails = {\n      ...userDetails, // Combine user details\n      ...serviceDetails, // Combine service details\n      bookingDate: selectedDate.toISOString(), // Format selected date to ISO string\n      timeFrom: selectedTimeFrom, // Include selected time from\n      timeTo: selectedTimeTo, // Include selected time to\n      discount: discount, // Apply discount if applicable\n    };\n\n    setServiceDetails(bookingDetails);\n\n    // Save booking to backend\n    await saveBookingToBackend(bookingDetails);\n\n    setStage(5); // Move to BookingConfirmed (confirmation) stage\n  };\n\n  return (\n    <div>\n      {stage === 1 && <CalendarComponent onDateSelect={handleDateSelect} />}\n      {stage === 2 && <TimeSlots onTimeSelect={handleTimeSelect} />}\n      {stage === 3 && (\n        <>\n          {discountMessage && <p>{discountMessage}</p>}\n          <BookingForm onProceedToService={handleProceedToService} />\n        </>\n      )}\n      {stage === 4 && <ServiceDetails onConfirmBooking={handleConfirmBooking} />}\n      {stage === 5 && <BookingConfirmed bookingDetails={serviceDetails} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,iBAAiB,MAAM,uBAAuB;AACrD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,gBAAgB,MAAM,2BAA2B;AACxD,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACc,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACgB,cAAc,EAAEC,iBAAiB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACoB,cAAc,EAAEC,iBAAiB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACwB,eAAe,EAAEC,kBAAkB,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAM0B,gBAAgB,GAAIC,IAAI,IAAK;IACjCd,eAAe,CAACc,IAAI,CAAC;IACrBJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;;EAED;EACA,MAAMK,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,EAAE,KAAK;IACrCf,mBAAmB,CAACc,IAAI,CAAC;IACzBZ,iBAAiB,CAACa,EAAE,CAAC;IACrBP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;;EAED;;EAEA,MAAMQ,eAAe,GAAG,MAAOC,KAAK,IAAK;IACvC,MAAMC,KAAK,GAAG;AAClB;AACA,kCAAkCD,KAAK;AACvC;AACA,KAAK;IAED,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEP;QAAM,CAAC;MAChC,CAAC,CAAC;MAEF,MAAMQ,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,MAAM,CAAC,CAAC,CAAE;MAC3CE,OAAO,CAACC,GAAG,CAACH,MAAM,CAACI,IAAI,CAAC;MACxB;MACA,IAAIJ,MAAM,CAACI,IAAI,IAAIJ,MAAM,CAACI,IAAI,CAACd,eAAe,KAAKe,SAAS,EAAE;QAC5D,OAAOL,MAAM,CAACI,IAAI,CAACd,eAAe;MACpC,CAAC,MAAM;QACL,MAAM,IAAIgB,KAAK,CAAC,+BAA+B,CAAC;MAClD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC;;EAGD;EACA,MAAMC,sBAAsB,GAAG,MAAOC,OAAO,IAAK;IAChD,MAAMC,UAAU,GAAG,MAAMpB,eAAe,CAACmB,OAAO,CAAClB,KAAK,CAAC;IACvD,IAAImB,UAAU,EAAE;MACdR,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BnB,kBAAkB,CAAC,qDAAqD,CAAC;IAC3E;IACAkB,OAAO,CAACC,GAAG,CAACM,OAAO,CAAC;IACpB/B,cAAc,CAAC+B,OAAO,CAAC;IACvB3B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;;EAED;EACA,MAAM6B,oBAAoB,GAAG,MAAOC,cAAc,IAAK;IACrD,MAAMpB,KAAK,GAAG;AAClB;AACA;AACA,mBAAmBoB,cAAc,CAACC,IAAI;AACtC,oBAAoBD,cAAc,CAACrB,KAAK;AACxC,oBAAoBqB,cAAc,CAACE,KAAK;AACxC,sBAAsBF,cAAc,CAACG,OAAO;AAC5C,yBAAyBH,cAAc,CAACI,UAAU;AAClD,0BAA0BJ,cAAc,CAACK,WAAW;AACpD,2BAA2BL,cAAc,CAACM,QAAQ;AAClD,yBAAyBN,cAAc,CAACO,MAAM;AAC9C,0BAA0BP,cAAc,CAACQ,WAAW;AACpD,0BAA0BR,cAAc,CAACS,YAAY;AACrD,uBAAuBT,cAAc,CAACU,SAAS;AAC/C,sBAAsBV,cAAc,CAACW,QAAQ;AAC7C,oBAAoBX,cAAc,CAACY,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA,KAAK;IAED,IAAI;MACF,MAAM/B,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEP;QAAM,CAAC;MAChC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACgC,EAAE,EAAE;QAChB,MAAM,IAAInB,KAAK,CAAC,wBAAwB,CAAC;MAC3C;MAEA,MAAMN,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BmB,KAAK,CAAC,2DAA2D,CAAC;IACpE;EACF,CAAC;;EAED;EACA,MAAMC,oBAAoB,GAAG,MAAOhD,cAAc,IAAK;IACrD,IAAI4C,QAAQ,GAAG,CAAC;IAChB,IAAIxC,eAAe,EAAE;MACnBwC,QAAQ,GAAG,EAAE,CAAC,CAAC;IACjB;IAEA,MAAMX,cAAc,GAAG;MACrB,GAAGnC,WAAW;MAAE;MAChB,GAAGE,cAAc;MAAE;MACnBsC,WAAW,EAAE9C,YAAY,CAACyD,WAAW,CAAC,CAAC;MAAE;MACzCV,QAAQ,EAAE7C,gBAAgB;MAAE;MAC5B8C,MAAM,EAAE5C,cAAc;MAAE;MACxBgD,QAAQ,EAAEA,QAAQ,CAAE;IACtB,CAAC;IAED3C,iBAAiB,CAACgC,cAAc,CAAC;;IAEjC;IACA,MAAMD,oBAAoB,CAACC,cAAc,CAAC;IAE1C9B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC;EAED,oBACEhB,OAAA;IAAA+D,QAAA,GACGhD,KAAK,KAAK,CAAC,iBAAIf,OAAA,CAACN,iBAAiB;MAACsE,YAAY,EAAE7C;IAAiB;MAAA8C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACpErD,KAAK,KAAK,CAAC,iBAAIf,OAAA,CAACL,SAAS;MAAC0E,YAAY,EAAEhD;IAAiB;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC5DrD,KAAK,KAAK,CAAC,iBACVf,OAAA,CAAAE,SAAA;MAAA6D,QAAA,GACG9C,eAAe,iBAAIjB,OAAA;QAAA+D,QAAA,EAAI9C;MAAe;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5CpE,OAAA,CAACJ,WAAW;QAAC0E,kBAAkB,EAAE5B;MAAuB;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eAC3D,CACH,EACArD,KAAK,KAAK,CAAC,iBAAIf,OAAA,CAACH,cAAc;MAAC0E,gBAAgB,EAAEV;IAAqB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACzErD,KAAK,KAAK,CAAC,iBAAIf,OAAA,CAACF,gBAAgB;MAACgD,cAAc,EAAEjC;IAAe;MAAAoD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV;AAAChE,EAAA,CAxJQD,GAAG;AAAAqE,EAAA,GAAHrE,GAAG;AA0JZ,eAAeA,GAAG;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}